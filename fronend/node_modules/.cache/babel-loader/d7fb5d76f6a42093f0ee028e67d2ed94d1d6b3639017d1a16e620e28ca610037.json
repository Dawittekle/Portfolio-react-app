{"ast":null,"code":"import postsData from \"../posts.json\";\nimport fs from \"fs\";\nimport path from \"path\";\nlet cachedPosts = null;\n\n// Helper function to safely parse dates\nconst safeDateSort = (a, b) => {\n  try {\n    return new Date(b.date) - new Date(a.date);\n  } catch (e) {\n    return 0; // Fallback if date parsing fails\n  }\n};\n\n// Helper to get first two lines from a markdown file\nfunction getFirstTwoLines(mdPath) {\n  try {\n    const fullPath = path.join(process.cwd(), \"src\", \"posts\", mdPath);\n    const content = fs.readFileSync(fullPath, \"utf-8\");\n    const lines = content.split(\"\\n\").filter(line => line.trim() !== \"\");\n    return lines.slice(0, 2).join(\" \").trim();\n  } catch (e) {\n    return \"\";\n  }\n}\nexport function getAllPosts() {\n  if (!cachedPosts) {\n    try {\n      cachedPosts = Object.values(postsData).map(post => {\n        // If post has a markdown path, extract first two lines as description\n        let description = post.description;\n        if (post.mdPath) {\n          description = getFirstTwoLines(post.mdPath);\n        }\n        return {\n          ...post,\n          description\n        };\n      });\n      cachedPosts.sort(safeDateSort); // Sort by date\n    } catch (error) {\n      console.error(\"Error loading posts:\", error);\n      cachedPosts = [];\n    }\n  }\n  return cachedPosts;\n}\nexport function getPostById(id) {\n  try {\n    const post = postsData[id];\n    if (!post) return null;\n    let description = post.description;\n    if (post.mdPath) {\n      description = getFirstTwoLines(post.mdPath);\n    }\n    return {\n      ...post,\n      description\n    };\n  } catch (error) {\n    console.error(`Error loading post ${id}:`, error);\n    return null;\n  }\n}\nexport function getLatestPosts(count = 3) {\n  try {\n    const allPosts = getAllPosts(); // Uses cached and sorted posts\n    return allPosts.slice(0, count);\n  } catch (error) {\n    console.error(\"Error getting latest posts:\", error);\n    return [];\n  }\n}\n\n// Development hot reload\nif (process.env.NODE_ENV === \"development\") {\n  if (module.hot) {\n    module.hot.accept(\"../posts.json\", () => {\n      cachedPosts = null; // Reset cache\n      console.log(\"ðŸ”¥ Posts updated - cache cleared\");\n    });\n  }\n}\nexport function getPostsByCategory(category) {\n  return getAllPosts().filter(post => post.category === category);\n}\nexport function getPostsByTag(tag) {\n  return getAllPosts().filter(post => post.tags.includes(tag));\n}","map":{"version":3,"names":["postsData","fs","path","cachedPosts","safeDateSort","a","b","Date","date","e","getFirstTwoLines","mdPath","fullPath","join","process","cwd","content","readFileSync","lines","split","filter","line","trim","slice","getAllPosts","Object","values","map","post","description","sort","error","console","getPostById","id","getLatestPosts","count","allPosts","env","NODE_ENV","module","hot","accept","log","getPostsByCategory","category","getPostsByTag","tag","tags","includes"],"sources":["C:/Users/Admin/Documents/GitHub/New folder 3/Portfolio-react-app/fronend/src/lib/loadPosts.js"],"sourcesContent":["import postsData from \"../posts.json\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nlet cachedPosts = null;\r\n\r\n// Helper function to safely parse dates\r\nconst safeDateSort = (a, b) => {\r\n  try {\r\n    return new Date(b.date) - new Date(a.date);\r\n  } catch (e) {\r\n    return 0; // Fallback if date parsing fails\r\n  }\r\n};\r\n\r\n// Helper to get first two lines from a markdown file\r\nfunction getFirstTwoLines(mdPath) {\r\n  try {\r\n    const fullPath = path.join(process.cwd(), \"src\", \"posts\", mdPath);\r\n    const content = fs.readFileSync(fullPath, \"utf-8\");\r\n    const lines = content.split(\"\\n\").filter((line) => line.trim() !== \"\");\r\n    return lines.slice(0, 2).join(\" \").trim();\r\n  } catch (e) {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nexport function getAllPosts() {\r\n  if (!cachedPosts) {\r\n    try {\r\n      cachedPosts = Object.values(postsData).map((post) => {\r\n        // If post has a markdown path, extract first two lines as description\r\n        let description = post.description;\r\n        if (post.mdPath) {\r\n          description = getFirstTwoLines(post.mdPath);\r\n        }\r\n        return { ...post, description };\r\n      });\r\n      cachedPosts.sort(safeDateSort); // Sort by date\r\n    } catch (error) {\r\n      console.error(\"Error loading posts:\", error);\r\n      cachedPosts = [];\r\n    }\r\n  }\r\n  return cachedPosts;\r\n}\r\n\r\nexport function getPostById(id) {\r\n  try {\r\n    const post = postsData[id];\r\n    if (!post) return null;\r\n    let description = post.description;\r\n    if (post.mdPath) {\r\n      description = getFirstTwoLines(post.mdPath);\r\n    }\r\n    return { ...post, description };\r\n  } catch (error) {\r\n    console.error(`Error loading post ${id}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getLatestPosts(count = 3) {\r\n  try {\r\n    const allPosts = getAllPosts(); // Uses cached and sorted posts\r\n    return allPosts.slice(0, count);\r\n  } catch (error) {\r\n    console.error(\"Error getting latest posts:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Development hot reload\r\nif (process.env.NODE_ENV === \"development\") {\r\n  if (module.hot) {\r\n    module.hot.accept(\"../posts.json\", () => {\r\n      cachedPosts = null; // Reset cache\r\n      console.log(\"ðŸ”¥ Posts updated - cache cleared\");\r\n    });\r\n  }\r\n}\r\n\r\nexport function getPostsByCategory(category) {\r\n  return getAllPosts().filter((post) => post.category === category);\r\n}\r\n\r\nexport function getPostsByTag(tag) {\r\n  return getAllPosts().filter((post) => post.tags.includes(tag));\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}